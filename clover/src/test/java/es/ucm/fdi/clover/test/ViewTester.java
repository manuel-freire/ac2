/*
 * AC - A source-code copy detector
 *
 *     For more information please visit: http://github.com/manuel-freire/ac2
 *
 * ****************************************************************************
 *
 * This file is part of AC, version 2.x
 *
 * AC is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * AC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with AC.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ucm.fdi.clover.test;

import es.ucm.fdi.clover.event.StructureChangeEvent;
import es.ucm.fdi.clover.layout.BoundVarLengthFDL;
import es.ucm.fdi.clover.layout.ConstantEdgeLengthFDL;
import es.ucm.fdi.clover.layout.FTALayout;
import es.ucm.fdi.clover.layout.LayoutAlgorithm;
import es.ucm.fdi.clover.layout.LayoutManager;
import es.ucm.fdi.clover.layout.LayoutCritic;
import es.ucm.fdi.clover.layout.Node;
import es.ucm.fdi.clover.layout.RandomLayout;
import es.ucm.fdi.clover.layout.ForceTreeLayout;
import es.ucm.fdi.clover.layout.SimpleBoxLayout;
import es.ucm.fdi.clover.layout.VarLengthFDL;
import es.ucm.fdi.clover.layout.VerticalBoxLayout;
import es.ucm.fdi.clover.model.Edge;
import es.ucm.fdi.clover.view.BaseView;
import es.ucm.fdi.clover.view.HighlightMouseListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;

/**
 * A simple GUI to test layouts with. Supports random graphs, and can save and restore
 * graphs for further analysis.
 *
 * @author  mfreire
 */
public class ViewTester extends javax.swing.JFrame {

	private Log log = LogFactory.getLog(ViewTester.class);

	private TestGraph rg;
	private BaseView v;
	private HashMap ll = new HashMap();

	/** Creates new form LayoutTester */
	public ViewTester(TestGraph base) {

		setTitle("View Tester");

		initComponents();
		rg = (base == null) ? new TestGraph(10, 12) : base;
		v = new BaseView(new TestViewGraph(rg));
		getContentPane().add(new JScrollPane(v), BorderLayout.CENTER);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(800, 600);
		ll.put("ForceTreeLayout", new ForceTreeLayout(80));
		ll.put("RandomLayout", new RandomLayout(800, 600));
		ll.put("VarLengthFDL", new VarLengthFDL());
		ll.put("ConstantEdgeLengthFDL", new ConstantEdgeLengthFDL());
		ll.put("FTALayout", new FTALayout());
		ll.put("SimpleBoxLayout", new SimpleBoxLayout());
		ll.put("VerticalBoxLayout", new VerticalBoxLayout());
		ll.put("BoundVarLengthFDL", new BoundVarLengthFDL());
		ArrayList al = new ArrayList(ll.keySet());
		jcbLayoutCombo.setModel(new DefaultComboBoxModel(al.toArray()));
		jcbLayoutCombo.setSelectedItem("VarLengthFDL");
		jcbLayoutCombo.repaint();

		HighlightMouseListener hml = new HighlightMouseListener(v);
		v.addMouseMotionListener(hml);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jbQuality = new javax.swing.JButton();
		jcbLayoutCombo = new javax.swing.JComboBox();
		jbReInit = new javax.swing.JButton();
		jbLayoutOnce = new javax.swing.JButton();
		jbLayoutSlow = new javax.swing.JToggleButton();
		jbRunLayout = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		jbAddV = new javax.swing.JButton();
		jcbAddRemNum = new javax.swing.JComboBox();
		jbAddE = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		jbRandomize = new javax.swing.JButton();
		jtfRandomParams = new javax.swing.JTextField();
		jSeparator2 = new javax.swing.JSeparator();
		jbLoad = new javax.swing.JButton();
		jtfFilename = new javax.swing.JTextField();
		jbSave = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jbQuality.setText("?");
		jbQuality.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbQualityActionPerformed(evt);
			}
		});
		jPanel1.add(jbQuality);

		jcbLayoutCombo.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		jcbLayoutCombo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jcbLayoutComboActionPerformed(evt);
			}
		});
		jPanel1.add(jcbLayoutCombo);

		jbReInit.setText("i");
		jbReInit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbReInitActionPerformed(evt);
			}
		});
		jPanel1.add(jbReInit);

		jbLayoutOnce.setText(">]");
		jbLayoutOnce.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbLayoutOnceActionPerformed(evt);
			}
		});
		jPanel1.add(jbLayoutOnce);

		jbLayoutSlow.setText(">");
		jbLayoutSlow.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbLayoutSlowActionPerformed(evt);
			}
		});
		jPanel1.add(jbLayoutSlow);

		jbRunLayout.setText(">>");
		jbRunLayout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbRunLayoutActionPerformed(evt);
			}
		});
		jPanel1.add(jbRunLayout);
		jPanel1.add(jSeparator1);

		jbAddV.setText("v");
		jbAddV.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbAddVActionPerformed(evt);
			}
		});
		jPanel1.add(jbAddV);

		jcbAddRemNum.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "-10", "-5", "-2", "-1", "1", "2", "5", "10" }));
		jcbAddRemNum.setSelectedIndex(4);
		jPanel1.add(jcbAddRemNum);

		jbAddE.setText("e");
		jbAddE.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbAddEActionPerformed(evt);
			}
		});
		jPanel1.add(jbAddE);

		getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

		jbRandomize.setText("random (n,m)");
		jbRandomize.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbRandomizeActionPerformed(evt);
			}
		});
		jPanel2.add(jbRandomize);

		jtfRandomParams.setText("10,10");
		jPanel2.add(jtfRandomParams);

		jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jPanel2.add(jSeparator2);

		jbLoad.setText("load fom ->");
		jbLoad.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbLoadActionPerformed(evt);
			}
		});
		jPanel2.add(jbLoad);

		jtfFilename.setText("/tmp/g1");
		jPanel2.add(jtfFilename);

		jbSave.setText("<- save to");
		jbSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbSaveActionPerformed(evt);
			}
		});
		jPanel2.add(jbSave);

		getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private javax.swing.Timer slowMotionLayoutTimer = null;

	private void jbLayoutSlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLayoutSlowActionPerformed
		// TODO add your handling code here:        
		if (jbLayoutSlow.isSelected()) {
			if (slowMotionLayoutTimer == null) {
				slowMotionLayoutTimer = new javax.swing.Timer(10,
						new ActionListener() {
							public void actionPerformed(ActionEvent ae) {
								jbLayoutOnceActionPerformed(ae);
							}
						});
			}
			slowMotionLayoutTimer.start();
		} else {
			slowMotionLayoutTimer.stop();
		}
		LayoutManager layout = v.getAnimator().getLayoutManager();
		if (layout.getAlgorithm().layoutFinished()) {
			return;
		}
		layout.getAlgorithm().layout();
		layout.applyChanges(v);
		System.err.println("Applied changes: step is over");
	}//GEN-LAST:event_jbLayoutSlowActionPerformed

	private void jbQualityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbQualityActionPerformed
		// TODO add your handling code here:
		LayoutCritic c = new LayoutCritic(v.getAnimator().getLayoutManager()
				.getNodes());
		log.info("q = " + c.getQuality());
	}//GEN-LAST:event_jbQualityActionPerformed

	private void jbAddEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddEActionPerformed
		int n = Integer.parseInt(jcbAddRemNum.getSelectedItem().toString());
		log.debug("n = " + n);
		StructureChangeEvent ev = new StructureChangeEvent(rg);
		if (n > 0) {
			int retries = 0;
			for (int k = 0; k < n && retries < 10; k++) {
				int s = rg.vertexSet().size();
				int x = (int) (Math.random() * s);
				int y = (int) (Math.random() * (s - 1));
				if (x == y) {
					y++;
				}
				if (!rg.containsEdge("" + x, "" + y)) {
					Edge e = new Edge("" + x, "" + y);
					ev.getAddedEdges().add(e);
					log.debug("+ otra arista...");
				} else {
					retries++;
					k--;
				}
			}
		}
		if (n < 0) {
			n = -n;
			ArrayList edges = new ArrayList(rg.edgeSet());
			for (int k = 0; k < n; k++) {
				int s = edges.size();
				int x = (int) (Math.random() * s);
				Edge e = (Edge) edges.remove(x);
				ev.getRemovedEdges().add(e);
				log.debug("- otra arista...");
			}
		}
		rg.structureChangePerformed(ev);
	}//GEN-LAST:event_jbAddEActionPerformed

	private void jbAddVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddVActionPerformed
		// TODO add your handling code here:
		int n = Integer.parseInt(jcbAddRemNum.getSelectedItem().toString());
		StructureChangeEvent ev = new StructureChangeEvent(rg);
		log.debug("n = " + n);
		if (n > 0) {
			for (int k = 0; k < n; k++) {
				int x = (int) (Math.random() * (rg.vertexSet().size() + k));
				rg.addAnotherOne(rg.vertexSet().size() + k, x, ev);
				log.debug("+ otro nodo...");
			}
		}
		if (n < 0) {
			n = -n;
			ArrayList vertices = new ArrayList(rg.vertexSet());
			for (int k = 0; k < n; k++) {
				int s = vertices.size();
				int x = (int) (Math.random() * s);
				Object o = vertices.remove(x);
				ev.getRemovedVertices().add(o);
				log.debug("- otro nodo...");
			}
		}
		rg.structureChangePerformed(ev);
	}//GEN-LAST:event_jbAddVActionPerformed

	private void jbReInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReInitActionPerformed
		// TODO add your handling code here:
		LayoutManager layout = v.getAnimator().getLayoutManager();
		v.getAnimator().getLayoutCache().clear();
		layout.setNodes(v);
		layout.getAlgorithm().init(layout.getNodes());
	}//GEN-LAST:event_jbReInitActionPerformed

	private void jbLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadActionPerformed
		// TODO add your handling code here:
		try {
			File f = new File(jtfFilename.getText());
			BufferedReader bfr = new BufferedReader(new FileReader(f));
			int n = Integer.parseInt(bfr.readLine());
			log.debug("Generating...");
			rg = new TestGraph(bfr.readLine());
			log.debug("... Ready");
			//            layout.loadNodes(rg, rg.getAttribs());
			//            layout.setMaxTime(1000);
			//            Node N[] = layout.getNodes();                        
			//            for (int i=0; i<n; i++) {
			//                N[i].sync(bfr.readLine());
			//            }
			//            bfr.close();
			v.setBase(rg);
			//            jcbLayoutComboActionPerformed(null);
			//            layout.getAlgorithm().init();                    
		} catch (Exception e) {
			System.out.println(e);
			e.printStackTrace();
		}
	}//GEN-LAST:event_jbLoadActionPerformed

	private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
		// TODO add your handling code here:
		try {
			File f = new File(jtfFilename.getText());
			FileWriter fw = new FileWriter(f);
			Node N[] = v.getAnimator().getLayoutManager().getNodes();
			fw.write("" + N.length + "\n");
			fw.write(rg.toString() + "\n");
			for (int i = 0; i < N.length; i++) {
				fw.write(N[i].toString() + "\n");
			}
			fw.close();
		} catch (Exception e) {
			log.warn("could not save", e);
		}
	}//GEN-LAST:event_jbSaveActionPerformed

	private LayoutAlgorithm oldAlgorithm = null;

	private void jcbLayoutComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLayoutComboActionPerformed
		// TODO add your handling code here:
		LayoutManager layout = v.getAnimator().getLayoutManager();
		layout.setAlgorithm((LayoutAlgorithm) ll.get(jcbLayoutCombo
				.getSelectedItem()));
		if (layout.getAlgorithm() != oldAlgorithm) {
			layout.getAlgorithm().init(layout.getNodes());
			System.err.println("Changed layout; now using "
					+ layout.getAlgorithm().getClass().getSimpleName());
			oldAlgorithm = layout.getAlgorithm();
		}
	}//GEN-LAST:event_jcbLayoutComboActionPerformed

	private void jbRunLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRunLayoutActionPerformed
		// TODO add your handling code here:
		LayoutManager layout = v.getAnimator().getLayoutManager();
		layout.run();
		layout.applyChanges(v);
		System.err.println("Applied changes: run finished");
	}//GEN-LAST:event_jbRunLayoutActionPerformed

	private void jbLayoutOnceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLayoutOnceActionPerformed
		LayoutManager layout = v.getAnimator().getLayoutManager();
		if (layout.getAlgorithm().layoutFinished()) {
			return;
		}
		layout.getAlgorithm().layout();
		layout.applyChanges(v);
		System.err.println("Applied changes: step is over");
	}//GEN-LAST:event_jbLayoutOnceActionPerformed

	private void jbRandomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRandomizeActionPerformed
		// TODO add your handling code here:
		String s = jtfRandomParams.getText();
		int n = Integer.parseInt(s.substring(0, s.indexOf(',')));
		int m = Integer.parseInt(s.substring(s.indexOf(',') + 1));
		log.info("Generating (" + n + ", " + m + ") ...");
		rg = new TestGraph(n, m);
		log.info("... Ready, Set ...");
		v.setBase(rg);
		log.info("... Go.");
		//        
		//        jcbLayoutComboActionPerformed(null);
		//        layout.getAlgorithm().init();
	}//GEN-LAST:event_jbRandomizeActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ViewTester(null).setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JButton jbAddE;
	private javax.swing.JButton jbAddV;
	private javax.swing.JButton jbLayoutOnce;
	private javax.swing.JToggleButton jbLayoutSlow;
	private javax.swing.JButton jbLoad;
	private javax.swing.JButton jbQuality;
	private javax.swing.JButton jbRandomize;
	private javax.swing.JButton jbReInit;
	private javax.swing.JButton jbRunLayout;
	private javax.swing.JButton jbSave;
	private javax.swing.JComboBox jcbAddRemNum;
	private javax.swing.JComboBox jcbLayoutCombo;
	private javax.swing.JTextField jtfFilename;
	private javax.swing.JTextField jtfRandomParams;
	// End of variables declaration//GEN-END:variables

}
