/*
 * AC - A source-code copy detector
 *
 *     For more information please visit: http://github.com/manuel-freire/ac2
 *
 * ****************************************************************************
 *
 * This file is part of AC, version 2.x
 *
 * AC is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * AC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with AC.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ucm.fdi.clover.gui;

import java.util.Properties;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author  mfreire
 */
public class PrefsDialog extends javax.swing.JDialog {

	public static final int CLUSTERING_PAGE = 0;
	public static final int LAYOUT_PAGE = 1;

	private PropertiesPanel layoutPanel = null;
	private Properties props = null;

	/** Creates new form ClusteringPrefsDialog */
	public PrefsDialog(java.awt.Frame parent, Properties props, int prefPage) {
		super(parent, true);
		this.props = props;

		initComponents();

		initClusterPanel();
		jtpPrefs.setTitleAt(CLUSTERING_PAGE, "Clustering and Focus");

		initLayoutPanel();
		jtpPrefs.add(layoutPanel);
		jtpPrefs.setTitleAt(LAYOUT_PAGE, "Layout parameters");

		// kludge: currently, layout is bigger than clustering
		jtpPrefs.setSelectedIndex(LAYOUT_PAGE);

		pack();
		jtpPrefs.setSelectedIndex(prefPage);
	}

	private void initClusterPanel() {
		jsClusterNum.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				jtfClusters.setText("" + getClusterNum());
			}
		});
		jsClusterNum.setValue(getClusterSlider());

		jsFocusSize.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				jtfFocus.setText("" + getFocusSize());
			}
		});
		jsFocusSize.setValue(getFocusSlider());
	}

	private void initLayoutPanel() {
		String[] s = new String[] { "layout time", "repulsion", "attraction" };
		String[] q = new String[] { "layout.timeout", "layout.repulsion",
				"layout.attraction" };

		layoutPanel = new PropertiesPanel(props, q, s);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		jtpPrefs = new javax.swing.JTabbedPane();
		jpCluster = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jsClusterNum = new javax.swing.JSlider();
		jsFocusSize = new javax.swing.JSlider();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jtfClusters = new javax.swing.JTextField();
		jtfFocus = new javax.swing.JTextField();
		jPanel1 = new javax.swing.JPanel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();

		setTitle("Preferences");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jpCluster.setLayout(new java.awt.GridBagLayout());

		jLabel1.setText("Cluster #");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(15, 6, 15, 6);
		jpCluster.add(jLabel1, gridBagConstraints);

		jLabel2.setText("Focus size");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(15, 6, 15, 6);
		jpCluster.add(jLabel2, gridBagConstraints);

		jsClusterNum.setMajorTickSpacing(20);
		jsClusterNum.setPaintTicks(true);
		jsClusterNum.setValue(60);
		jsClusterNum.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jsClusterNumStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(15, 2, 4, 1);
		jpCluster.add(jsClusterNum, gridBagConstraints);

		jsFocusSize.setMajorTickSpacing(20);
		jsFocusSize.setPaintTicks(true);
		jsFocusSize.setValue(40);
		jsFocusSize.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jsFocusSizeStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(15, 2, 4, 1);
		jpCluster.add(jsFocusSize, gridBagConstraints);

		jLabel3.setText("-");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(15, 6, 15, 0);
		jpCluster.add(jLabel3, gridBagConstraints);

		jLabel4.setText("+");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 6);
		jpCluster.add(jLabel4, gridBagConstraints);

		jLabel5.setText("-");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(15, 6, 15, 0);
		jpCluster.add(jLabel5, gridBagConstraints);

		jLabel6.setText("+");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 6);
		jpCluster.add(jLabel6, gridBagConstraints);

		jtfClusters.setColumns(3);
		jtfClusters.setEditable(false);
		jtfClusters.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jtfClusters.setText("00");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
		jpCluster.add(jtfClusters, gridBagConstraints);

		jtfFocus.setColumns(3);
		jtfFocus.setEditable(false);
		jtfFocus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jtfFocus.setText("00");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
		jpCluster.add(jtfFocus, gridBagConstraints);

		jtpPrefs.addTab("Clustering", jpCluster);

		getContentPane().add(jtpPrefs, java.awt.BorderLayout.CENTER);

		jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER,
				15, 5));

		jButton1.setText("Ok");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});
		jPanel1.add(jButton1);

		jButton2.setText("Cancel");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});
		jPanel1.add(jButton2);

		getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jsFocusSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsFocusSizeStateChanged
	}//GEN-LAST:event_jsFocusSizeStateChanged

	private void jsClusterNumStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsClusterNumStateChanged
	}//GEN-LAST:event_jsClusterNumStateChanged

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		// Add your handling code here:
		closeDialog(null);
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		// Add your handling code here:

		switch (jtpPrefs.getSelectedIndex()) {
		case CLUSTERING_PAGE:
			props.setProperty("cluster.clusterNumber", "" + getClusterNum());
			props.setProperty("cluster.focusSize", "" + getFocusSize());
			break;
		case LAYOUT_PAGE:
			layoutPanel.keepValues();
			break;
		default:
			// do nothing - but this is WEIRD!
		}

		closeDialog(null);
	}//GEN-LAST:event_okButtonActionPerformed

	private int getClusterNum() {
		float v = jsClusterNum.getValue() / 100.0f;
		int min = Integer.parseInt(props
				.getProperty("cluster.minClusterNumber"));
		int max = Integer.parseInt(props
				.getProperty("cluster.maxClusterNumber"));
		return min + (int) ((max - min) * v);
	}

	private int getFocusSize() {
		float v = jsFocusSize.getValue() / 100.0f;
		int min = Integer.parseInt(props.getProperty("cluster.minFocusSize"));
		int max = Integer.parseInt(props.getProperty("cluster.maxFocusSize"));
		return min + (int) ((max - min) * v);
	}

	private int getClusterSlider() {
		int v = Integer.parseInt(props.getProperty("cluster.clusterNumber"));
		int min = Integer.parseInt(props
				.getProperty("cluster.minClusterNumber"));
		int max = Integer.parseInt(props
				.getProperty("cluster.maxClusterNumber"));
		return (int) ((v - min) * 100.0f / (max - min));
	}

	private int getFocusSlider() {
		int v = Integer.parseInt(props.getProperty("cluster.focusSize"));
		int min = Integer.parseInt(props.getProperty("cluster.minFocusSize"));
		int max = Integer.parseInt(props.getProperty("cluster.maxFocusSize"));
		return (int) ((v - min) * 100.0f / (max - min));
	}

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
	}//GEN-LAST:event_closeDialog

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		new PrefsDialog(new javax.swing.JFrame(), new Properties(), 0)
				.setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jpCluster;
	private javax.swing.JSlider jsClusterNum;
	private javax.swing.JSlider jsFocusSize;
	private javax.swing.JTextField jtfClusters;
	private javax.swing.JTextField jtfFocus;
	private javax.swing.JTabbedPane jtpPrefs;
	// End of variables declaration//GEN-END:variables

}
