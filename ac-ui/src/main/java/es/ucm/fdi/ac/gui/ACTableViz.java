/*
 * AC - A source-code copy detector
 *
 *     For more information please visit: http://github.com/manuel-freire/ac2
 *
 * ****************************************************************************
 *
 * This file is part of AC, version 2.x
 *
 * AC is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * AC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with AC.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ucm.fdi.ac.gui;

import es.ucm.fdi.ac.Analysis;
import es.ucm.fdi.ac.Submission;
import es.ucm.fdi.ac.dgram.ACDendrogram;
import es.ucm.fdi.ac.dgram.DendrogramModel;
import es.ucm.fdi.ac.dgram.DendrogramModel.LinkageModel;
import es.ucm.fdi.ac.tableviz.SimpleRenderer;
import es.ucm.fdi.ac.tableviz.TableModel;
import es.ucm.fdi.ac.tableviz.TableViz;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;

/**
 *
 * @author  mfreire
 */
public class ACTableViz extends javax.swing.JPanel {

	private Analysis ac;
	private String testKey;
	private TableModel tm;
	private TableViz tv;

	/** Creates new form ACTableViz */
	public ACTableViz(Analysis ac, String testKey) {
		initComponents();
		this.ac = ac;
		this.testKey = testKey;
		int n = ac.getSubmissions().length;
		tm = new TableModel(n);
		for (Submission s : ac.getSubmissions()) {
			tm.addLeaf(s, (float[]) s.getData(testKey));
		}
		tv = new TableViz(tm, SimpleRenderer.class);
		add(new JScrollPane(tv), BorderLayout.CENTER);

		DefaultComboBoxModel<Object> cbm = new DefaultComboBoxModel<>(new Object[] {
				"(none)", 
				new DendrogramModel.SingleLinkage(),
				new DendrogramModel.AverageLinkage(),
				new DendrogramModel.CompleteLinkage() });
		jcbLinkageType.setModel(cbm);
		jcbLinkageType.setSelectedItem(1);
	}

	/**
	 * Switch linkage type
	 */
	private void linkageTypeChanged(LinkageModel nextLinkage) {
		if (nextLinkage == null) {
			tm.clearPerm();
		} else {
			tm.setPerm(ACDendrogram.allSubmissionsModel(ac, testKey,
					nextLinkage));
		}
		tv.repaint();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jlCenter = new javax.swing.JLabel();
		jcbLinkageType = new javax.swing.JComboBox<>();
		jButton1 = new javax.swing.JButton();

		setLayout(new java.awt.BorderLayout());

		jlCenter.setText("Ordering");
		jPanel1.add(jlCenter);

		jcbLinkageType.setModel(new javax.swing.DefaultComboBoxModel<>(
				new String[] { "(none)", "Item 2", "Item 3", "Item 4" }));
		jcbLinkageType.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jcbLinkageTypeItemStateChanged(evt);
			}
		});
		jPanel1.add(jcbLinkageType);

		jButton1.setText("click!");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		jPanel1.add(jButton1);

		add(jPanel1, java.awt.BorderLayout.SOUTH);
	}// </editor-fold>//GEN-END:initComponents

	private void jcbLinkageTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbLinkageTypeItemStateChanged
		LinkageModel selected = null;
		if (!jcbLinkageType.getSelectedItem().equals("(none)")) {
			selected = (LinkageModel) jcbLinkageType.getSelectedItem();
		} else {
			selected = null;
		}
		linkageTypeChanged(selected);
	}//GEN-LAST:event_jcbLinkageTypeItemStateChanged

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		double w = tv.getWidth();
		double h = tv.getHeight();
		BufferedImage bi = new BufferedImage((int) w, (int) h,
				BufferedImage.TYPE_INT_RGB);
		Graphics g = bi.getGraphics();
		tv.paint(g);
		String fname = "/tmp/screenshot_ac_" + (int) (Math.random() * 1000)
				+ ".png";
		System.err.println("Creating screenshot (" + w + " x " + h + ") at "
				+ fname);
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(new File(fname));
			ImageIO.write(bi, "png", fos);
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			try {
				fos.close();
			} catch (Exception e) {
			}
		}
	}//GEN-LAST:event_jButton1ActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JComboBox<Object> jcbLinkageType;
	private javax.swing.JLabel jlCenter;
	// End of variables declaration//GEN-END:variables

}
